{"name":"Hue-cli","tagline":"A command line interface to phillips hue","body":"hue(1)\r\n======\r\n\r\nA command line interface to [phillips hue](http://meethue.com)\r\n\r\nInstallation\r\n------------\r\n\r\nFirst, install [Node.js](http://nodejs.org), then:\r\n\r\n    npm install -g hue-cli\r\n\r\n...and the executable will be installed globally as `hue`\r\n\r\nUsage\r\n-----\r\n\r\n    Usage: hue [-H host] [--json] [command]\r\n\r\n    control phillips hue over the command line\r\n\r\n    examples\r\n      hue config          # view the hue config\r\n      hue lights          # get a list of lights\r\n      hue lights 5        # get information about light 5\r\n      hue lights 5,6,7 on # turn lights 5 6 and 7 on\r\n      hue lights on       # turn all lights on\r\n      hue lights 1 ff0000 # turn light 1 red\r\n      hue lights 1 red    # same as above\r\n      hue help            # this message\r\n      hue register        # register this app to hue, done automatically\r\n      hue search          # search for hue base stations\r\n\r\n    commands\r\n      config, lights, help, register, search\r\n\r\n    options\r\n      -h, --help     print this message and exit\r\n      -H, --host     the hostname or ip of the bastion to control\r\n      -i, --init     initialize the config file at /Users/dave/.hue.json\r\n      -j, --json     force output to be in json\r\n      -u, --updates  check for available updates\r\n      -v, --version  print the version number and exit\r\n\r\nExample\r\n-------\r\n\r\n### starting off\r\n\r\nFirst, let's search for nearby base stations\r\n\r\n    $ hue search\r\n    1 stations found\r\n\r\n    1: 10.0.1.218\r\n\r\nPass in `-j` for json if you'd like\r\n\r\n    $ hue -j search\r\n    [\r\n      \"10.0.1.218\"\r\n    ]\r\n\r\nNext, let's try to list the lights on that base station\r\n\r\n    $ hue -H 10.0.1.218 lights\r\n    error: application not registered, run `hue register` first\r\n\r\nThis app isn't registered yet, let's go ahead and do that\r\n\r\n    $ hue -H 10.0.1.218 register\r\n    please go and press the link button on your base station\r\n    Hue Base Station paired!\r\n\r\n### listing lights\r\n\r\nAll you had to do was press the button on your base station to register, cool\r\nright?  Let's re-run the lights command\r\n\r\n    $ hue -H 10.0.1.218 lights\r\n       1 Mike 1\r\n       2 Mike 2\r\n       3 Dave closet\r\n       4 Hallway 2\r\n       5 Hallway 1\r\n       6 Front hallway\r\n       7 Dave Ledge Left\r\n       8 Dave Ledge Right\r\n       9 Dave's Piano\r\n      10 Dave's Lamp\r\n      11 Balcony Mike\r\n      12 Balcony Dave\r\n      13 Balcony Living Room\r\n      14 Mike 3\r\n      15 Living room 3\r\n      16 Living room 1\r\n\r\nAgain, `-j` if you'd like json output.\r\n\r\nRunning with the command `lights` will give us a list of all the lights\r\nconnected to the base station.\r\n\r\nBefore we continue, let's create a configuration file.  In the file we can\r\nset the default host to connect to, so we don't have to keep supplying the\r\n`-H` argument.  Run:\r\n\r\n    $ hue --init\r\n    config file written to `~/.hue.json`\r\n\r\nNow, modify that file and replace `null` with `10.0.1.218`, or whatever\r\nyour IP or hostname is. Now we'll no longer have to supply the `-H` argument\r\nwith every command.\r\n\r\nFrom here, we can get information about a single light like:\r\n\r\n    $ hue lights 1\r\n       1 on    Mike 1\r\n\r\nAnd `-j` for json\r\n\r\n    $ hue -j lights 1\r\n    {\r\n      \"state\": {\r\n        \"on\": true,\r\n        \"bri\": 141,\r\n        \"hue\": 13122,\r\n        \"sat\": 211,\r\n        \"xy\": [\r\n          0.5119,\r\n          0.4147\r\n        ],\r\n        \"ct\": 467,\r\n        \"alert\": \"none\",\r\n        \"effect\": \"none\",\r\n        \"colormode\": \"ct\",\r\n        \"reachable\": true\r\n      },\r\n      \"type\": \"Extended color light\",\r\n      ...\r\n    }\r\n\r\n### controlling the lights\r\n\r\nLet's actually mess with the lights now.  Let's turn on the light in my closet.\r\n\r\n    $ hue lights 3 on\r\n    light 3 success\r\n\r\nWhat about both lights in the hallway?\r\n\r\n    $ hue lights 4,5 on\r\n    light 4 success\r\n    light 5 success\r\n\r\nWhat if we try to turn on a non-existent light?\r\n\r\n    $ hue lights 99 on\r\n    light 99 failed: resource, /lights/99/state, not available\r\n\r\nCool, errors handled properly.  Let's see some more examples\r\n\r\n    $ hue lights off\r\n    light 1 success\r\n    light 2 success\r\n    light 3 success\r\n    ...\r\n\r\nThis is shorthand for\r\n\r\n    $ hue lights all off\r\n\r\nWhere `all` is a recognized keyword for all lights in the system.  You can also:\r\n\r\n    $ hue lights off\r\n\r\nTo quickly turn off all lights on the system\r\n\r\n### controlling colors\r\n\r\n> We can turn the lights on and off, that's great... what about colors?\r\n\r\nYou want colors? how about hex\r\n\r\n    $ hue lights 4 ffffff\r\n    light 4 success\r\n\r\nWe just set the light in the hallway to pure white, hex `ffffff`.  Let's go crazy\r\nand turn all of the lights in the house red (this is where we need the `all` keyword)\r\n\r\n    $ hue lights all ff0000\r\n    light 1 success\r\n    light 2 success\r\n    ...\r\n\r\nIt's worth noting here that, because this tool is written in Node, all requests to the\r\nlights are done concurrently.  This means we don't have to wait for light 1 to finish\r\nbefore we instruct light 2 to change, nor wait for light 2 to finish before we instruct\r\nlight 3 to change, and so on.\r\n\r\nShorthand hex is also supported\r\n\r\n    $ hue lights 3,4 0f0\r\n    light 3 success\r\n    light 4 success\r\n\r\nNow lights 3 and 4 are green\r\n\r\nLast but not least, any CSS name is supported for colors\r\n\r\n    $ hue lights 1 yellow\r\n    light 1 success\r\n\r\nLight 1 is now yellow. The full list of colors is available here\r\nhttp://xahlee.info/js/css_color_names.html\r\n\r\nConfig\r\n------\r\n\r\nAn optional config file can be created at `~/.hue.json` that looks like...\r\n\r\n``` json\r\n{\r\n  \"host\": \"1.2.3.4\",\r\n  \"colors\": {\r\n    \"myred\": \"fe0000\",\r\n    \"myblue\": \"0000fe\"\r\n  }\r\n}\r\n```\r\n\r\n* `host`: the host to connect to (normally passed in as `-H`)\r\n* `colors`: a key-value pair of color aliases to their hex mapping, you can use these\r\nwhen changing the colors of a light\r\n\r\nCredits\r\n-------\r\n\r\n* [Phillips hue](http://meethue.com): I assume you know what this is by now\r\n* [hue.js](https://github.com/thatguydan/hue.js): Node.js hue client\r\n* [css-color-names](https://github.com/bahamas10/css-color-names): color aliases provided by this module\r\n\r\nLicense\r\n-------\r\n\r\nMIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}